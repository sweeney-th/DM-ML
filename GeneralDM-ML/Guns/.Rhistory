p.g2 <- g2/cases
px.g2 <- x.g2/cases
# for the third...
g3 <- length(which(dataset[4] == given3 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g3 <- length(which(dataset[4] == given3 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g3 <- g3/cases
px.g3 <- x.g3/cases
# for the fouth...
g4 <- length(which(dataset[5] == given4 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g4 <- length(which(dataset[5] == given4 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g4 <- g4/cases
px.g4 <- x.g4/cases
# for the final
g5 <- length(which(dataset[6] == given5 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g5 <- length(which(dataset[6] == given5 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g5 <- g5/cases
px.g5 <- x.g5/cases
totalLessThan50 <- length(which(c.cd$X50K != ">50K"))
# execute the niave bayes formula
numerator   <- p.pred   * p.g1  * p.g2  * p.g3  * p.g4  * p.g5
denominator <- x.p.pred * px.g1 * px.g2 * px.g3 * px.g4 * px.g5
answer <- numerator/(numerator + denominator)
return(answer)
}
# call the formula
result <- x.given.5(pred = ">50K", given1 = "Male", given2 = "White", given3 = "Federal-gov",
given4 = "Bachelors", given5 = "Ireland", dataset = d)
control <- pure.prob50 <- length(which(c.cd$X50K == ">50K"))/cases
print("Given our factors:")
result
print("Pure Probability:")
control
for ( i in 1:nrow(c.cd) )
{
c.cd$Pred[i] <- x.given.5(   pred = ">50K",
given1 = as.character(c.cd[i, 2]),
given2 = as.character(c.cd[i, 3]),
given3 = as.character(c.cd[i, 4]),
given4 = as.character(c.cd[i, 5]),
given5 = as.character(c.cd[i, 6]),
dataset = c.cd                  )
}
c.cd$Pred <- round(c.cd$Pred, digits = 0)
# set the numbers from the dummy codes
c.cd$Pred[which(d$Pred == 0) ] <- ">50K"
c.cd$Pred[which(d$Pred == 1) ] <- "<=50K"
# find the acccuracy
accuracy<- length(which(c.cd$Pred == c.cd$X50K))/nrow(c.cd)
accuracy
str(c.cd)
for ( i in 1:nrow(c.cd) )
{
c.cd$Pred[i] <- x.given.5(   pred = ">50K",
given1 = as.character(c.cd[i, 2]),
given2 = as.character(c.cd[i, 3]),
given3 = as.character(c.cd[i, 4]),
given4 = as.character(c.cd[i, 5]),
given5 = as.character(c.cd[i, 6]),
dataset = c.cd                  )
}
#c.cd$Pred <- round(c.cd$Pred, digits = 0)
# set the numbers from the dummy codes
#c.cd$Pred[which(d$Pred == 0) ] <- ">50K"
#c.cd$Pred[which(d$Pred == 1) ] <- "<=50K"
# find the acccuracy
#accuracy<- length(which(c.cd$Pred == c.cd$X50K))/nrow(c.cd)
#accuracy
for ( i in 1:4)#nrow(c.cd) )
{
c.cd$Pred[i] <- x.given.5(   pred = ">50K",
given1 = as.character(c.cd[i, 2]),
given2 = as.character(c.cd[i, 3]),
given3 = as.character(c.cd[i, 4]),
given4 = as.character(c.cd[i, 5]),
given5 = as.character(c.cd[i, 6]),
dataset = c.cd                  )
}
#c.cd$Pred <- round(c.cd$Pred, digits = 0)
# set the numbers from the dummy codes
#c.cd$Pred[which(d$Pred == 0) ] <- ">50K"
#c.cd$Pred[which(d$Pred == 1) ] <- "<=50K"
# find the acccuracy
#accuracy<- length(which(c.cd$Pred == c.cd$X50K))/nrow(c.cd)
#accuracy
c.cd
head(c.cd)
#age,workclass,fnlwgt,education,education-num,marital-status,occupation,relationship,race,sex,capital-gain,capi#tal-loss,hours-per-week,native-country,
# get the data
cd <- read.csv("census.csv", stringsAsFactors = FALSE, header = TRUE)
str(cd)
# get rid of the ?
cd[cd == "?"] <- NA
cd[cd == " ?"] <- NA
# let's see what happens if we remove all with NAs using the complete cases function
c.cd <- cd[complete.cases(cd), ]
# get rid of all these spaces everywhere for no reason using the most complicated
c.cd <- as.data.frame(apply(c.cd, 2, function(y) as.character(gsub(" ", "", y))))
nrow(cd)
nrow(c.cd)
nrow(cd) - nrow(c.cd)
###################################################################################################
#  This is a test run to test the probability that a person makes 50k+ give that they are white.  #
#                                                                                                 #
#         The formula is: (probability of class given "X")                                        #
#                                                                                                 #
#                     p.C.X       =             (p.X.C)(p.C) / (p.X)                              #
#                                                                                                 #
#                     p.50k.white =     (p.white.50k)(p.50k) / (p.white)                          #
#                                                                                                 #
###################################################################################################
# number of cases
cases <- nrow(c.cd)
# number of white entries
white <- length(which(c.cd$race == "White"))
# pure probability somone is white give nothing else
p.white <- white/cases
# get 50k+ entries
fiftyK <- length(which(c.cd$X50K == ">50K"))
# probability somone makes > 50k given nothing else
p.fiftyK <- fiftyK/cases
# of entries that make 50, how many are white?
p.white.50 = length(which(c.cd$race == "White" & c.cd$X50K == ">50K"))/length(which(c.cd$X50K == ">50K"))
# define a function to do the calculation
nb.class <- function( whiteGivenFifty, fiftyPlus, white )
{
# execute formula
as.numeric(prediction <- ( (whiteGivenFifty)*(fiftyPlus) / (white) ))
return(prediction)
}
# test the function
answer <- nb.class( whiteGivenFifty = p.white.50, fiftyPlus = p.fiftyK, white = p.white )
answer
# get the data from the
d <- data.frame(c.cd$X50K, c.cd$sex, c.cd$race, c.cd$workclass, c.cd$education, c.cd$native.country)
# define function as ~predict x given 5 thing~
x.given.5 <- function(pred, given1, given2, given3, given4, given5, dataset)
{
# number of times the prediction occurs naturally
p.pred   <- length(which(dataset[1] == pred))
x.p.pred <- length(which(dataset[1] != pred))
# I have confirmed that this is working ^
# make sure we're getting a dataset
cases <- nrow(dataset)
# we will have it predict the first column given the next 5
# note that "given1" is [2] because the target is in [1]
# get the numbers where are givens are true and not true
# this translates to "The probabilty that subect is white and makes >50"
# and the probability that they are make 50K given they're not white
# white people making 50+ / people making 50K in general
g1 <- length(which(dataset[2] == given1 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g1 <- length(which(dataset[2] == given1 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
# find their probability
p.g1 <- g1/cases
px.g1 <- x.g1/cases
# repeat this pattern for the ret of the givens.
# given more time, one might write functions to smooth this slightly
g2 <- length(which(dataset[3] == given2 & dataset[1] == ">50K"))/length(which(c.cd$X50K == ">50K"))
x.g2 <- length(which(dataset[3] == given2 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g2 <- g2/cases
px.g2 <- x.g2/cases
# for the third...
g3 <- length(which(dataset[4] == given3 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g3 <- length(which(dataset[4] == given3 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g3 <- g3/cases
px.g3 <- x.g3/cases
# for the fouth...
g4 <- length(which(dataset[5] == given4 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g4 <- length(which(dataset[5] == given4 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g4 <- g4/cases
px.g4 <- x.g4/cases
# for the final
g5 <- length(which(dataset[6] == given5 & dataset[1] == ">50K" ))/length(which(c.cd$X50K == ">50K"))
x.g5 <- length(which(dataset[6] == given5 & dataset[1] == "<=50K"))/length(which(c.cd$X50K == "<=50K"))
p.g5 <- g5/cases
px.g5 <- x.g5/cases
totalLessThan50 <- length(which(c.cd$X50K != ">50K"))
# execute the niave bayes formula
numerator   <- p.pred   * p.g1  * p.g2  * p.g3  * p.g4  * p.g5
denominator <- x.p.pred * px.g1 * px.g2 * px.g3 * px.g4 * px.g5
answer <- numerator/(numerator + denominator)
return(answer)
}
# call the formula
result <- x.given.5(pred = ">50K", given1 = "Male", given2 = "White", given3 = "Federal-gov",
given4 = "Bachelors", given5 = "Ireland", dataset = d)
control <- pure.prob50 <- length(which(c.cd$X50K == ">50K"))/cases
print("Given our factors:")
result
print("Pure Probability:")
control
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
d$police <- as.factor(d$police)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test <- d[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
model <- train(police ~., method = "rf", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
d$police <- as.factor(d$police)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test <- d[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(police ~., method = "tree", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
d$police <- as.factor(d$police)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test <- d[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test <- d[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(police ~., method = "glm", data = train, trainControl = fitControl)
#model <- train(police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test <- d[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
#model <- train(police ~., method = "glm", data = train, trainControl = fitControl)
str(d)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- as.data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$police, p = 0.7, list = FALSE)
str(sd)
str(d)
d$X <- NA
str(d)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- d[d$intent, d$police, d$sex, d$age, d$race, d$education]
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- d[d$intent, d$police, d$sex, d$age, d$race, d$education, ]
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$police, p = 0.7, list = FALSE)
str(sd)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$d.police, p = 0.7, list = FALSE)
train <- sd[partitionIndex, ]
test <- sd[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
#model <- train(police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$d.police, p = 0.7, list = FALSE)
train <- sd[partitionIndex, ]
test <- sd[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$d.police, p = 0.7, list = FALSE)
train <- sd[partitionIndex, ]
test <- sd[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$d.police, p = 0.7, list = FALSE)
train <- sd[partitionIndex, ]
test <- sd[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "lm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$d.police, p = 0.7, list = FALSE)
train <- sd[partitionIndex, ]
test <- sd[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "knn", data = train, trainControl = fitControl)
str(sd)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
sd <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(sd$d.police, p = 0.7, list = FALSE)
train <- sd[partitionIndex, ]
test <- sd[-partitionIndex, ]
#model <- lm(police ~ race + sex + age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
str(d)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$police, p = 0.7, list = FALSE)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$d.police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test  <- d[-partitionIndex, ]
model <- lm(d.police ~ d.race + d.sex + d.age, data = train)
test$pred <- predict(model, test)
test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
#fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
#model <- train(d.police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$d.police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test  <- d[-partitionIndex, ]
#model <- lm(d.police ~ d.race + d.sex + d.age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
#fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "glm", data = train, trainControl = fitControl)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
#d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$d.police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test  <- d[-partitionIndex, ]
#model <- lm(d.police ~ d.race + d.sex + d.age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
#fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "glm", data = train)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$d.police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test  <- d[-partitionIndex, ]
#model <- lm(d.police ~ d.race + d.sex + d.age, data = train)
#test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
#length(which(test$pred == test$police))/nrow(test)
#fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "glm", data = train)
summary(model)
test$pred <- predict(model, test)
test$pred <- round(test$pred, 0)
test$pred <- predict(model, test)
#test$pred <- round(test$pred, 0)
length(which(test$pred == test$police))/nrow(test)
library(caret)
d <- read.csv("full_data.csv")
d <- na.omit(d)
for (i in 1:ncol(d)) {
d[,i] <- as.numeric(d[,i])
}
d$police <- as.factor(d$police)
d <- data.frame(d$intent, d$police, d$sex, d$age, d$race, d$education)
partitionIndex = createDataPartition(d$d.police, p = 0.7, list = FALSE)
train <- d[partitionIndex, ]
test  <- d[-partitionIndex, ]
#model <- lm(d.police ~ d.race + d.sex + d.age, data = train)
#fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
model <- train(d.police ~., method = "knn", data = train)
